Question Link: https://www.geeksforgeeks.org/problems/print-all-lcs-sequences3413/1

class Solution {
    public List<String> all_longest_common_subsequences(String s, String t) {
        // Code here
        int n = s.length();
        int m = t.length();
        
        int[][] dp = new int[n+1][m+1];
        
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (s.charAt(i - 1) == t.charAt(j - 1)) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        TreeSet<String> answer = new TreeSet<>();
        StringBuilder str = new StringBuilder();
        HashSet<String> memo = new HashSet<>();
        backTrack(s, t, dp, n, m, answer, str, memo);
        List<String> ans = new ArrayList<>();
        for (String st: answer) {
            ans.add(st);
        }
        return ans;
    }
    public void backTrack(String s, String t, int[][] dp, int n, int m, TreeSet<String> answer, StringBuilder str, HashSet<String> memo) {
        if (n <= 0 || m <= 0) {
            answer.add(str.reverse().toString());
            return;
        }
        String dummyKey = n+"$"+m+"$"+str;
        if (memo.contains(dummyKey)) {
            return;
        }
        memo.add(dummyKey);
        
        if (s.charAt(n - 1) == t.charAt(m - 1)) {
            str.append(s.charAt(n - 1));
            backTrack(s, t, dp, n - 1, m - 1, answer, new StringBuilder(str), memo);
        } else {
            if (dp[n][m] == dp[n - 1][m]) {
                backTrack(s, t, dp, n - 1, m, answer, new StringBuilder(str), memo);
            }
            if (dp[n][m] == dp[n][m - 1]) {
                backTrack(s, t, dp, n, m - 1, answer, new StringBuilder(str), memo);
            }
        }
    }
}
