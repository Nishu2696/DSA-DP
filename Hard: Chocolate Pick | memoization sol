Question Link: https://www.geeksforgeeks.org/problems/chocolates-pickup/1

class Solution {
    public int solve(int n, int m, int grid[][]) {
        // Code here
        
        int[][][] dp = new int[n][m][m];
        
        for (int[][] row1: dp) {
            for (int[] row2: row1) {
                Arrays.fill(row2, -1);
            }
        }
        
        return countChocolates(0, 0, m - 1, n, m, grid, dp);
    }
    
    public int countChocolates(int i, int j1, int j2, int n, int m, int[][] grid, int[][][] dp) {
        if (j1 < 0 || j1 >= m || j2 < 0 || j2 >= m) {
            return (int) Math.pow(-10, 9);
        }
        
        if (i == n - 1) {
            if (j1 == j2) {
                return grid[i][j1];
            } else {
                return grid[i][j1] + grid[i][j2];
            }
        }
        
        if (dp[i][j1][j2] != -1) {
            return dp[i][j1][j2];
        }
        
        int minVal = Integer.MIN_VALUE;
        
        for (int d1 = -1; d1 <= 1; d1++) {
            for (int d2 = -1; d2 <= 1; d2++) {
                int ans;
                if (j1 == j2) {
                    ans = grid[i][j1] + countChocolates(i + 1, j1 + d1, j2 + d2, n, m, grid, dp);
                } else {
                    ans = grid[i][j1] + grid[i][j2] + countChocolates(i + 1, j1 + d1, j2 + d2, n, m, grid, dp);
                }
                minVal = Math.max(minVal, ans);
            }
        }
        
        return dp[i][j1][j2] = minVal;
    }
}
