Question Link: https://www.geeksforgeeks.org/problems/0-1-knapsack-problem0945/1

class Solution {
    // Function to return max value that can be put in knapsack of capacity.
    static int knapSack(int capacity, int val[], int wt[]) {
        // code here
        int n = wt.length;
        int[][] dp = new int[n][capacity + 1];
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= capacity; j++) {
                dp[i][j] = -1;
            }
        }
        
        return helper(val, wt, capacity, dp, n - 1);
    }
    
    static int helper(int[] val, int[] wt, int target, int[][] dp, int i) {
        if (i < 0) {
            return 0;
        }
        if (dp[i][target] != -1) {
            return dp[i][target];
        }
        
        int notTaken = helper(val, wt, target, dp, i - 1);
        int taken = Integer.MIN_VALUE;
        
        if (wt[i] <= target) {
            taken = val[i] + helper(val, wt, target - wt[i], dp, i - 1);
        }
        
        return dp[i][target] = Math.max(notTaken, taken);
    }
}
