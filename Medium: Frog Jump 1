Question Link: https://www.geeksforgeeks.org/problems/geek-jump/1

class Solution {
    // Memoziation approach
    // int minCost(int[] height) {
    //     // code here
    //     int n = height.length;
    //     int[] dp = new int[n];
    //     for (int i = 0; i < n; i++) {
    //         dp[i] = -1;
    //     }
    //     return frogJump(n - 1, dp, height);
    // }
    // public int frogJump(int n, int[] dp, int[] height) {
    //     if (n == 0) {
    //         return 0;
    //     }
    //     if (dp[n] != -1) {
    //         return dp[n];
    //     }
        
    //     int jumpTwo = Integer.MAX_VALUE;
    //     int jumpOne = frogJump(n - 1, dp, height) + Math.abs(height[n] - height[n - 1]);
        
    //     if (n > 1) {
    //         jumpTwo = frogJump(n - 2, dp, height) + Math.abs(height[n] - height[n - 2]);
    //     }
        
    //     dp[n] = Math.min(jumpOne, jumpTwo);
        
    //     return Math.min(jumpOne, jumpTwo);
    // }
    
    // Tabulation Approach
    
    int minCost(int[] height) {
        int n = height.length;
        int prev = 0, prev1 = 0;
        
        for (int i = 1; i < n; i++) {
            int jumpOne = prev + Math.abs(height[i] - height[i - 1]);
            int jumpTwo = Integer.MAX_VALUE;
            
            if (i > 1) {
                jumpTwo = prev1 + Math.abs(height[i] - height[i - 2]);
            }
            
            int currValue = Math.min(jumpOne, jumpTwo);
            
            prev1 = prev;
            prev = currValue;
        }
        
        return prev;
    }
}
