Question Link: https://www.geeksforgeeks.org/problems/perfect-sum-problem5633/1

class Solution {
    // Function to calculate the number of subsets with a given sum
    public int perfectSum(int[] nums, int target) {
        // code here
        int n = nums.length;
        int[][] dp = new int[n][target + 1];
        
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        
        return helper(0, target, nums,dp);
    }
    
    public int helper(int i, int k, int[] nums, int[][] dp) {
        if (k < 0) {
            return 0;
        }
        
        if ( i == nums.length) {
            return k == 0 ? 1 : 0;
        }
        
        if (dp[i][k] != -1) {
            return dp[i][k];
        }
        
        int exclude = helper(i + 1, k, nums, dp);
        int include = helper(i + 1, k - nums[i], nums, dp);
        
        return dp[i][k] = include + exclude;
    }
}
