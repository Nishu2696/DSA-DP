Question Link: https://leetcode.com/problems/coin-change-ii/

class Solution {
    // memoization approach
    // public int change(int amount, int[] coins) {
    //     int n = coins.length;
    //     int[][] dp = new int[n][amount + 1];

    //     for (int i = 0; i < n; i++) {
    //         Arrays.fill(dp[i], -1);
    //     }

    //     return helper(coins, dp, n - 1, amount);
    // }
    // public int helper(int[] coins, int[][] dp, int i, int target) {
    //     if (i == 0) {
    //         if (target % coins[0] == 0) {
    //             return 1;
    //         } else {
    //             return 0;
    //         }
    //     }

    //     if (dp[i][target] != -1) {
    //         return dp[i][target];
    //     }

    //     int notTaken = helper(coins, dp, i - 1, target);
    //     int taken = 0;

    //     if (coins[i] <= target) {
    //         taken = helper(coins, dp, i, target - coins[i]);
    //     }

    //     return dp[i][target] = notTaken + taken;
    // }

    // tabulation approach - with space optimization

    public int change(int amount, int[] coins) {
        int n = coins.length;
        int[] prev = new int[amount + 1];

        for (int i = 0; i <= amount; i++) {
            if (i % coins[0] == 0) {
                prev[i] = 1;
            }
        }

        for (int i = 1; i < n; i++) {
            int[] curr = new int[amount + 1];

            for (int j = 0; j <= amount; j++) {
                int notTaken = prev[j];
                int taken = 0;

                if (coins[i] <= j) {
                    taken = curr[j - coins[i]];
                }
                curr[j] = notTaken + taken;
            }
            prev = curr;
        }

        return prev[amount];
    }
}
