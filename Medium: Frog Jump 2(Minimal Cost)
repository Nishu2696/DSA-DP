Question Link: https://www.geeksforgeeks.org/problems/minimal-cost/1

class Solution {
    // Memoziation Technique
    // public int minimizeCost(int k, int arr[]) {
    //     // code here
    //     int n = arr.length;
    //     int[] dp = new int[n];
    //     Arrays.fill(dp, -1);
    //     return countCost(arr, dp, n - 1, k);
    // }
    // public int countCost(int[] arr, int[] dp, int n, int k) {
    //     if (n == 0) {
    //         return 0;
    //     }
        
    //     if (dp[n] != -1) {
    //         return dp[n];
    //     }
        
    //     int minCost = Integer.MAX_VALUE;
        
    //     for (int j = 1; j <= k; j++) {
    //         if (n - j >= 0) {
    //             int jumpOne = countCost(arr, dp, n - j, k) + Math.abs(arr[n] - arr[n - j]);
    //             minCost = Math.min(jumpOne, minCost);
    //         }
    //     }
        
    //     return dp[n] = minCost;
    // }
    
    // Tabulation Technique
    
    public int minimizeCost(int k, int arr[]) {
        int n = arr.length;
        int[] dp = new int[n];
        Arrays.fill(dp, -1);
        
        dp[0] = 0;
        
        for (int i = 1; i < n; i++) {
            int minStep = Integer.MAX_VALUE;
            for (int j = 1; j <= k; j++) {
                if (i - j >= 0) {
                    int jump = dp[i - j] + Math.abs(arr[i] - arr[i - j]);
                    minStep = Math.min(jump, minStep);
                }
            }
            dp[i] = minStep;
        }
        
        return dp[n - 1];
    }
}
