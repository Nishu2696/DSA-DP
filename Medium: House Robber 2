Question Link: https://leetcode.com/problems/house-robber-ii/

class Solution {
    // Memoization Approach
    // public int rob(int[] nums) {
    //     int n = nums.length;

    //     if (n == 1) {
    //         return nums[0];
    //     }

    //     if (n == 2) {
    //         return Math.max(nums[0], nums[1]);
    //     }
    //     // robFirstArray = will not include 0th index
    //     // robSecondArray = will not include last element
    //     // final result will be max of robFirstArray & robSecondArray

    //     int[] robFirstArray = new int[n - 1];
    //     int[] robSecondArray = new int[n - 1];

    //     for (int i = 0; i < n; i++) {
    //         if (i != 0) {
    //             robFirstArray[i - 1] = nums[i]; // not adding 0th element to robFirstArray
    //         }
    //         if (i != n - 1) {
    //             robSecondArray[i] = nums[i]; // not adding last element to robSecondArray
    //         }
    //     }

    //     int[] dp = new int[n];
    //     Arrays.fill(dp, -1);

    //     int firstRob = helper(robFirstArray, n - 2, dp); // n - 2 because one element has been removed
    //     Arrays.fill(dp, -1); // re-setting dp array to -1
    //     int secondRob = helper(robSecondArray, n - 2, dp);

    //     return Math.max(firstRob, secondRob);
    // }

    // public int helper(int[] nums, int i, int[] dp) {
    //     if (i < 0) {
    //         return 0;
    //     }

    //     if (i == 0) {
    //         return nums[0];
    //     }

    //     if (dp[i] != -1) {
    //         return dp[i];
    //     }

    //     int yesRobbery = nums[i] + helper(nums, i - 2, dp);
    //     int noRobbery = helper(nums, i - 1, dp);

    //     return dp[i] = Math.max(yesRobbery, noRobbery);
    // }

    // Tabulation Approach

    public int rob(int[] nums) {
        int n = nums.length;

        if (n == 1) {
            return nums[0];
        }

        if (n == 2) {
            return Math.max(nums[0], nums[1]);
        }
        // robFirstArray = will not include 0th index
        // robSecondArray = will not include last element
        // final result will be max of robFirstArray & robSecondArray

        int[] robFirstArray = new int[n - 1];
        int[] robSecondArray = new int[n - 1];

        for (int i = 0; i < n; i++) {
            if (i != 0) {
                robFirstArray[i - 1] = nums[i]; // not adding 0th element to robFirstArray
            }
            if (i != n - 1) {
                robSecondArray[i] = nums[i]; // not adding last element to robSecondArray
            }
        }

        int firstRob = helper(robFirstArray); // n - 2 because one element has been removed
        int secondRob = helper(robSecondArray);

        return Math.max(firstRob, secondRob);
    }

    public int helper (int[] nums) {
        int n = nums.length;
        int prev1 = nums[0];
        int prev2 = 0;

        for (int i = 1; i < n; i++) {
            int pick = nums[i];
            if (i > 1) {
                pick = pick + prev2;
            }
            int curr = Math.max(pick, prev1);
            prev2 = prev1;
            prev1 = curr;
        }

        return prev1;
    }
}
