Question Link: https://leetcode.com/problems/longest-common-subsequence/

class Solution {
    // memoization approach
    // public int longestCommonSubsequence(String text1, String text2) {
    //     int n = text1.length();
    //     int m = text2.length();

    //     if (m == n && text1.equals(text2)) {
    //         return m;
    //     }

    //     int[][] dp = new int[n][m];

    //     for (int i = 0; i < n; i++) {
    //         Arrays.fill(dp[i], -1);
    //     }

    //     return lcs(text1, text2, dp, n - 1, m - 1);
    // }

    // public int lcs(String s1, String s2, int[][] dp, int n, int m) {
    //     if (n < 0 || m < 0) {
    //         return 0;
    //     }
    //     if (dp[n][m] != -1) {
    //         return dp[n][m];
    //     }
    //     if (s1.charAt(n) == s2.charAt(m)) {
    //         return dp[n][m] = 1 + lcs(s1, s2, dp, n - 1, m - 1);
    //     } else {
    //         return dp[n][m] = Math.max(lcs(s1, s2, dp, n, m - 1), lcs(s1, s2, dp, n - 1, m));
    //     }
    // }

    // Tabulation Approach - With Space Optimization

    public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();

        int[] prev = new int[m + 1];
        int[] curr = new int[m + 1];

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m ; j++) {
                if (text1.charAt(i - 1) == text2.charAt(j - 1)) {
                    curr[j] = 1 + prev[j - 1];
                } else {
                    curr[j] = Math.max(prev[j], curr[j - 1]);
                }
            }
            prev = (int[]) (curr.clone());
        }

        return prev[m];
    }
}
