Question Link: https://leetcode.com/problems/minimum-path-sum/

class Solution {
    // Memoization Approach
    // public int minPathSum(int[][] grid) {
    //     int m = grid.length;
    //     int n = grid[0].length;

    //     int[][] dp = new int[m][n];
    //     for (int i = 0; i < m; i++) {
    //         Arrays.fill(dp[i], -1);
    //     }

    //     return countSum(m - 1, n - 1, grid, dp);
    // }

    // public int countSum(int i, int j, int[][] grid, int[][] dp) {
    //     if (i == 0 && j == 0) {
    //         return grid[i][j];
    //     }
    //     if (i < 0 || j < 0) {
    //         return (int) Math.pow(10, 9);
    //     }

    //     if (dp[i][j] != -1) {
    //         return dp[i][j];
    //     }

    //     int up = grid[i][j] + countSum(i - 1, j, grid, dp);
    //     int left = grid[i][j] + countSum(i, j - 1, grid, dp);

    //     return dp[i][j] = Math.min(up, left);
    // }

    // Tabulation Approach
    // public int minPathSum(int[][] grid) {
    //     int m = grid.length;
    //     int n = grid[0].length;
    //     int[][] dp = new int[m][n];

    //     for (int i = 0; i < m; i++) {
    //         for (int j = 0; j < n; j++) {
    //             if (i == 0 && j == 0) {
    //                 dp[i][j] = grid[i][j];
    //             } else {
    //                 int up = grid[i][j];
    //                 if (i > 0) {
    //                     up = up + dp[i - 1][j];
    //                 } else {
    //                     up = up + (int) Math.pow(10, 9);
    //                 }

    //                 int left = grid[i][j];
    //                 if (j > 0) {
    //                     left = left + dp[i][j - 1];
    //                 } else {
    //                     left = left + (int) Math.pow(10, 9);
    //                 }

    //                 dp[i][j] = Math.min(up, left);
    //             }
    //         }
    //     }

    //     return dp[m - 1][n - 1];
    // }

    // Tabulation - Space Optimised Approach

    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;

        int[] prev = new int[n];

        for (int i = 0; i < m; i++) {
            int[] temp = new int[n];
            for (int j = 0; j < n; j++) {
                if (i == 0 && j == 0) {
                    temp[j] = grid[i][j];
                } else {
                    int up = grid[i][j];
                    if (i > 0) {
                        up = up + prev[j];
                    } else {
                        up = up + (int) Math.pow(10, 9);
                    }

                    int left = grid[i][j];
                    if (j > 0) {
                        left = left + temp[j - 1];
                    } else {
                        left = left + (int) Math.pow(10, 9);
                    }

                    temp[j] = Math.min(up, left);
                }
            }

            prev = temp;
        }

        return prev[n - 1];
    }
}
