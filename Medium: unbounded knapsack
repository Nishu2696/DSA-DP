Question Link: https://www.geeksforgeeks.org/problems/knapsack-with-duplicate-items4201/1

class Solution {
    // memoization approach
    // static int knapSack(int val[], int wt[], int capacity) {
    //     // code here
    //     int n = wt.length;
    //     int[][] dp = new int[n][capacity + 1];
        
    //     for (int i = 0; i < n; i++) {
    //         Arrays.fill(dp[i], -1);
    //     }
        
    //     return helper(val, wt, capacity, dp, n - 1);
    // }
    // static int helper(int[] val, int[] wt, int target, int[][] dp, int i) {
    //     if (i == 0) {
    //         return ((int) (target/wt[0]))* val[0];
    //     }
        
    //     if (dp[i][target] != -1) {
    //         return dp[i][target];
    //     }
        
    //     int notTaken = 0 + helper(val, wt, target, dp, i - 1);
    //     int taken = Integer.MIN_VALUE;
        
    //     if (wt[i] <= target) {
    //         taken = val[i] + helper(val, wt, target - wt[i], dp, i);
    //     }
        
    //     return dp[i][target] = Math.max(notTaken, taken);
    // }
    
    // tabulation approach - with space optimization
    
    static int knapSack(int val[], int wt[], int capacity) {
        int n = wt.length;
        int[] prev = new int[capacity + 1];
        
        for (int i = wt[0]; i <= capacity; i++) {
            prev[i] = ((int) (i / wt[0])) * val[0];
        }
        
        for (int i = 1; i < n; i++) {
            for (int j = 0; j <= capacity; j++) {
                int notTaken = prev[j];
                int taken = Integer.MIN_VALUE;
                
                if (wt[i] <= j) {
                    taken = val[i] + prev[j - wt[i]];
                }
                
                prev[j] = Math.max(notTaken, taken);
            }
        }
        
        return prev[capacity];
    }
}
