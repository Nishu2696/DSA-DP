Question Link: https://leetcode.com/problems/target-sum/

class Solution {
    // memoization approach
    // public int findTargetSumWays(int[] nums, int target) {
    //     int totalSum = 0;
    //     int n = nums.length;
    //     for (int i = 0; i < n; i++) {
    //         totalSum = totalSum + nums[i];
    //     }

    //     if (totalSum - target < 0) {
    //         return 0;
    //     }
    //     if ((totalSum - target) % 2 == 1) {
    //         return 0;
    //     }

    //     int s2 = (totalSum - target) / 2;
    //     int[][] dp = new int[n][s2 + 1];

    //     for (int i = 0; i < n; i++) {
    //         Arrays.fill(dp[i], -1);
    //     }

    //     return countTarget(nums, dp, n - 1, s2);
    // }

    // public int countTarget(int[] nums, int[][] dp, int i, int target) {
    //     if (i == 0) {
    //         if (target == 0 && nums[0] == 0) {
    //             return 2;// as we target is 0 amd nums[0] is also 0, +nums[0] and -nums[0] is valid, hence returned 2
    //         }
    //         if (target == 0 || target == nums[0]) {
    //             return 1; // if target == nums[0] to make target to 0, the only possible way is target - nums[0], hence returned 1
    //         }
    //         return 0;
    //     }
    //     if (dp[i][target] != -1) {
    //         return dp[i][target];
    //     }

    //     int notTaken = countTarget(nums, dp, i - 1, target);
    //     int taken = 0;

    //     if (nums[i] <= target) {
    //         taken = countTarget(nums, dp, i - 1, target - nums[i]);
    //     }

    //     return dp[i][target] = notTaken + taken;
    // }

    // tabulation approach - with space optimized

    public int findTargetSumWays(int[] nums, int target) {
        int n = nums.length;
        int totalSum = 0;

        for (int i = 0; i < n; i++) {
            totalSum = totalSum + nums[i];
        }
        
        if (totalSum - target < 0) {
            return 0;
        }

        if ((totalSum - target) % 2 == 1) {
            return 0;
        }

        int s2 = (totalSum - target) / 2;

        return countTarget(nums, s2);
    }

    public int countTarget(int[] nums, int target) {
        int n = nums.length;
        int mod = (int) (Math.pow(10, 9) + 7);
        int[] prev = new int[target + 1];

        if (nums[0] == 0) {
            prev[0] = 2;
        } else {
            prev[0] = 1;
        }

        if (nums[0] != 0 && nums[0] <= target) {
            prev[nums[0]] = 1; // there is one way to form reach target (by selecting nums[i] alone).
        }

        for (int i = 1; i < n; i++) {
            int[] curr = new int[target + 1];
            for (int j = 0; j <= target; j++) {
                int notTaken = prev[j];
                int taken = 0;

                if (nums[i] <= j) {
                    taken = prev[j - nums[i]];
                }
                curr[j] = (notTaken + taken) % mod;
            }
            prev = curr;
        }

        return prev[target];
    }
}
