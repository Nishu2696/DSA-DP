Question Link: https://leetcode.com/problems/unique-paths/

class Solution {
    // Memoziation Approcah
    // public int uniquePaths(int m, int n) {
    //     int[][] dp = new int[m][n];
    //     for (int i = 0; i < m; i++) {
    //         Arrays.fill(dp[i], -1);
    //     }
    //     return countPaths(m - 1, n - 1, dp);
    // }

    // public int countPaths(int i, int j, int[][] dp) {
    //     if (i == 0 && j == 0) {
    //         return 1;
    //     }
    //     if (i < 0 || j < 0) {
    //         return 0;
    //     }

    //     if (dp[i][j] != -1) {
    //         return dp[i][j];
    //     }

    //     int up = countPaths(i - 1, j, dp);
    //     int down = countPaths(i, j - 1, dp);

    //     return dp[i][j] = up + down;
    // }

    // Tabulation APproach

    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];

        for (int i = 0;i < m; i++) {
            Arrays.fill(dp[i], -1);
        }

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 && j == 0) {
                    dp[i][j] = 1;
                    continue;
                }

                int down = 0;
                int right = 0;

                if (i > 0) {
                    down = dp[i-1][j];
                }
                if (j > 0) {
                    right = dp[i][j-1];
                }
                dp[i][j] = down + right;
            }
        }
        return dp[m-1][n-1];
    }
}
