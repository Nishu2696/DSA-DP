Question Link: https://leetcode.com/problems/climbing-stairs/submissions/1558419129/

class Solution {
    // TLE Code
    // public int count = 0;
    // public int climbStairs(int n) {
    //     countStairs(n);
    //     return count;
    // }
    // public void countStairs(int n) {
    //     if (n == 0) {
    //         count++;
    //         return;
    //     }
    //     if (n < 0) {
    //         return;
    //     }
    //     countStairs(n-1);
    //     countStairs(n-2);

    //     return;
    // }

    // memoization code

    // public int climbStairs(int n) {
    //     Map<Integer, Integer> memo = new HashMap<>();
    //     return countStairs(n, memo);
    // }

    // public int countStairs(int n, Map<Integer, Integer> memo) {
    //     if (n <= 1) {
    //         return 1;
    //     }
    //     if (!memo.containsKey(n)) {
    //         memo.put(n, countStairs(n-1, memo) + countStairs(n-2, memo));
    //     }
    //     return memo.get(n);
    // }

    // Tabulation - with optimised code

    public int climbStairs(int n) {
        if (n<=1) {
            return 1;
        }
        int prev = 1, curr = 1;

        for (int i = 2; i <= n; i++) {
            int temp = curr;
            curr = prev + curr;
            prev = temp;
        }

        return curr;
    }

}
